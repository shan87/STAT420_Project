test_mod = subset(test, test$OverallQual != "2" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
members = matrix(nrow = 4, ncol = 3)
colnames(members) = c("FirstName", "LastName", "NetID")
rownames(members) = c("1", "2", "3","4")
members[1,1] = "Anupama"
members[1,2] = "Agrahari"
members[1,3] = "anupama3"
members[2,1] = "Dhanendra"
members[2,2] = "Singh"
members[2,3] = "disingh2"
members[3,1] = "Naveen Kumar"
members[3,2] = "Palani"
members[3,3] = "npalani3"
members[4,1] = "Shanthakumar"
members[4,2] = "Subramanian"
members[4,3] = "SS81"
knitr::kable(members)
#Libraries used
library(lmtest)
library(broom)
library(formattable)
library(faraway)
library(ggplot2)
library(leaps)
library(caret)
#Import train and test dataset from the source files.
train = read.csv("train.csv", stringsAsFactors = FALSE)
test = read.csv("test.csv", stringsAsFactors = FALSE)
dim(train)
dim(test)
#Displaying the structure of train dataset
str(train)
## Removing the target variable saleprice
SalePrice = train$SalePrice
train$SalePrice = NULL
# Combine data sets
house_data = rbind(train,test)
##Change Numeric to factor
house_data$MSSubClass = as.character(house_data$MSSubClass)
house_data$OverallCond = as.character(house_data$OverallCond)
house_data$OverallQual = as.character(house_data$OverallQual)
house_data$GarageCars = as.character(house_data$GarageCars)
house_data$YrSold = as.character(house_data$YrSold)
house_data$MoSold = as.character(house_data$MoSold)
## Replacing the NA in character variable with None.
for (col in colnames(house_data)){
if (typeof(house_data[,col]) == "character"){
new_col = house_data[,col]
new_col[is.na(new_col)] = "None"
house_data[col] = as.factor(new_col)
}
}
## Checking for missing data values in all integer variables
Missing_indices = sapply(house_data,function(x) sum(is.na(x)))
Missing_Summary = data.frame(index = names(house_data),Missing_Values=Missing_indices)
Missing_Summary[Missing_Summary$Missing_Values > 0,]
## Impute Mean
house_data$MasVnrArea[which(is.na(house_data$MasVnrArea))] = mean(house_data$MasVnrArea,na.rm=T)
## Impute Median
house_data$LotFrontage[which(is.na(house_data$LotFrontage))] = median(house_data$LotFrontage,na.rm = T)
## Impute 0
house_data$GarageYrBlt[which(is.na(house_data$GarageYrBlt))] = 0
house_data$BsmtFullBath[which(is.na(house_data$BsmtFullBath ))] = 0
house_data$BsmtHalfBath[which(is.na(house_data$BsmtHalfBath ))] = 0
house_data$BsmtUnfSF[which(is.na(house_data$BsmtUnfSF))] = 0
house_data$BsmtFinSF1[which(is.na(house_data$BsmtFinSF1))] = 0
house_data$BsmtFinSF2[which(is.na(house_data$BsmtFinSF2))] = 0
house_data$GarageArea[which(is.na(house_data$GarageArea))] = 0
house_data$GarageCars[which(is.na(house_data$GarageCars))] = 0
house_data$TotalBsmtSF[which(is.na(house_data$TotalBsmtSF))] = 0
# Separate out our train and test sets
train = house_data[1:nrow(train),]
train$SalePrice = SalePrice
test = house_data[(nrow(train)+1):nrow(house_data),]
#Displaying the train dataset structure after data cleansing.
str(train)
#Splitting the train dataset into train and test
set.seed(1)
house_trn_idx = sample(1:nrow(train), 1168)
house_trn = train[house_trn_idx,]
house_tst = train[-house_trn_idx,]
# Correlation Plot
house_train_num<-house_trn[, sapply(house_trn, is.numeric)]
Correlation<-cor(na.omit(house_train_num))
library(corrplot)
corrplot(Correlation, method = "square")
#variables having Correlation > 0.5 with SalePrice
for (col in colnames(house_trn)){
if(is.numeric(house_trn[,col])){
if( abs(cor(house_trn[,col],house_trn$SalePrice)) > 0.5){
print(col)
print( cor(house_trn[,col],house_trn$SalePrice))
}
}
}
#Distribution of SalePrice
par(mfrow = c(1,2))
hist(house_trn$SalePrice,
xlab   = "Sale Price without log(SalePrice)",
main   = "Histogram of sales price",
border = "blue",
breaks = 20)
#Distribution of log(SalePrice)
hist(log(house_trn$SalePrice),
xlab   = "Sale Price with log(SalePrice)",
main   = "Histogram of sales price",
border = "blue",
breaks = 20)
#Q-Q Plot for SalePrice
qqnorm(house_trn$SalePrice, main = "Normal Q-Q Plot, without log(SalePrice)", col = "darkgrey")
qqline(house_trn$SalePrice, col = "blue", lwd = 2)
#Q-Q Plot for log(SalePrice)
qqnorm(log(house_trn$SalePrice), main = "Normal Q-Q Plot, with log(SalePrice) ", col = "darkgrey")
qqline(log(house_trn$SalePrice), col = "blue", lwd = 2)
#Histogram for checking the distribution of numeric variables
var_sel = c("YearBuilt", "YearRemodAdd","TotalBsmtSF", "X1stFlrSF","GrLivArea", "FullBath", "TotRmsAbvGrd", "GarageArea")
par(mfrow = c(1,3))
for(i in 1:length(var_sel))
hist(house_trn[,var_sel[i]],
xlab   = paste(toString(var_sel[i])),
main   = paste("Histogram of ",toString(var_sel[i])),
border = "blue",
breaks = 20)
#Box plot for factor variables against SalePrice
char_var = as.array(names(house_trn[, sapply(house_trn, class) == 'factor']))
par(mfrow = c(1,2))
for(i in 1:length(char_var))
boxplot(house_trn$SalePrice ~ house_trn[,char_var[i]], data = mpg,
xlab   = paste(toString(char_var[i])),
ylab   = "Sales price",
main   = paste("saleprice vs", toString(char_var[i])),
pch    = 20,
cex    = 2,
las=1,
outlier.size=10,
col    = "blue",
border = "Black")
add_mod = lm(log(SalePrice) ~  (MSSubClass +GrLivArea + TotalBsmtSF + OverallQual+ YearBuilt+ FullBath + YearRemodAdd + Neighborhood +TotRmsAbvGrd+ExterQual), data = house_trn)
(r2_add=summary(add_mod)$r.squared)
par(mfrow = c(1, 2))
plot(fitted(add_mod), resid(add_mod), col = "grey", pch = 20,ylim = c(-1, 1),
xlab = "Fitted", ylab = "Residuals", main = "Data from Additive Model-1")
abline(h = 0, col = "dodgerblue", lwd = 2)
qqnorm(resid(add_mod), main = "Normal Q-Q Plot", col = "darkgrey",ylim = c(-1, 1))
qqline(resid(add_mod), col = "dodgerblue", lwd = 2)
bptest(add_mod)
shapiro.test(resid(add_mod))
(RMSE_Train_add = sqrt(mean(resid(add_mod) ^ 2)))
(RMSE_test_add = sqrt(mean((log(house_tst$SalePrice) - predict(add_mod,house_tst)) ^ 2)))
add_mod2 = lm(log(SalePrice) ~  (GrLivArea + TotalBsmtSF + OverallQual+ YearBuilt+ YearRemodAdd + Neighborhood +TotRmsAbvGrd+ExterQual), data = house_trn)
(r2_add2=summary(add_mod2)$r.squared)
par(mfrow = c(1, 2))
plot(fitted(add_mod2), resid(add_mod2), col = "grey", pch = 20,ylim = c(-1, 1),
xlab = "Fitted", ylab = "Residuals", main = "Data from Additive Model-2")
abline(h = 0, col = "dodgerblue", lwd = 2)
qqnorm(resid(add_mod2), main = "Normal Q-Q Plot", col = "darkgrey",ylim = c(-1, 1))
qqline(resid(add_mod2), col = "dodgerblue", lwd = 2)
bptest(add_mod2)
shapiro.test(resid(add_mod2))
(RMSE_Train_add2 = sqrt(mean(resid(add_mod2) ^ 2)))
(RMSE_test_add2 = sqrt(mean((log(house_tst$SalePrice) - predict(add_mod2,house_tst)) ^ 2)))
anova(add_mod2,add_mod)
log_int_mod = lm(log(SalePrice) ~  (log(GrLivArea)+OverallQual+ YearBuilt+ YearRemodAdd + Neighborhood +log(TotRmsAbvGrd)+ExterQual)^2, data = house_trn)
(r2_int=summary(log_int_mod)$r.squared)
par(mfrow = c(1, 2))
plot(fitted(log_int_mod), resid(log_int_mod), col = "grey", pch = 20,ylim = c(-1, 1),
xlab = "Fitted", ylab = "Residuals", main = "Data from Log interaction model")
abline(h = 0, col = "dodgerblue", lwd = 2)
qqnorm(resid(log_int_mod), main = "Normal Q-Q Plot", col = "darkgrey",ylim = c(-1, 1))
qqline(resid(log_int_mod), col = "dodgerblue", lwd = 2)
bptest(log_int_mod)
shapiro.test(resid(log_int_mod))
(RMSE_Train_log_int = sqrt(mean(resid(log_int_mod) ^ 2)))
(RMSE_test_log_int = sqrt(mean((log(house_tst$SalePrice) - predict(log_int_mod,house_tst)) ^ 2)))
#Log Intearction Model
log_int_mod = lm(log(SalePrice) ~  (log(GrLivArea)+OverallQual+ YearBuilt+ YearRemodAdd + Neighborhood +log(TotRmsAbvGrd)+ExterQual)^2, data = house_trn)
#Cooks distance for log interaction model
log_int_mod_cd = cooks.distance(log_int_mod)
#Log interaction model after removing influential points
int_add_cd_mod = lm(log(SalePrice) ~  (log(GrLivArea)+OverallQual+YearBuilt + YearRemodAdd + Neighborhood +log(TotRmsAbvGrd)+ExterQual)^2, data = house_trn  , subset = log_int_mod_cd < 4 / length(log_int_mod_cd))
(r2_cd=summary(int_add_cd_mod)$r.squared)
par(mfrow = c(1, 2))
plot(fitted(int_add_cd_mod), resid(int_add_cd_mod), col = "grey", pch = 20,ylim = c(-1, 1),
xlab = "Fitted", ylab = "Residuals", main = "Log interaction model - influential removed")
abline(h = 0, col = "dodgerblue", lwd = 2)
qqnorm(resid(int_add_cd_mod), main = "Normal Q-Q Plot", col = "darkgrey",ylim = c(-1, 1))
qqline(resid(int_add_cd_mod), col = "dodgerblue", lwd = 2)
bptest(int_add_cd_mod)
shapiro.test(resid(int_add_cd_mod))
(RMSE_Train_log_cd = sqrt(mean(resid(int_add_cd_mod) ^ 2)))
house_mod = subset(house_tst, house_tst$OverallQual != "2" & house_tst$Neighborhood !="Blueste" & house_tst$Neighborhood !="Veenker" & house_tst$ExterQual !="Fa" )
(RMSE_test_log_cd = sqrt(mean((log(house_tst$SalePrice) - predict(int_add_cd_mod,house_mod)) ^ 2)))
n = length(resid(int_add_cd_mod))
BIC_Log_cd = step(int_add_cd_mod,k=log(n),trace=0)
(r2_bic=summary(BIC_Log_cd)$r.squared)
par(mfrow = c(1, 2))
plot(fitted(BIC_Log_cd), resid(BIC_Log_cd), col = "grey", pch = 20,ylim = c(-1, 1),
xlab = "Fitted", ylab = "Residuals", main = "Data from Model 2")
abline(h = 0, col = "dodgerblue", lwd = 2)
qqnorm(resid(BIC_Log_cd), main = "Normal Q-Q Plot", col = "darkgrey",ylim = c(-1, 1))
qqline(resid(BIC_Log_cd), col = "dodgerblue", lwd = 2)
bptest(BIC_Log_cd)
shapiro.test(resid(BIC_Log_cd))
(RMSE_Train_BIC_log_cd = sqrt(mean(resid(BIC_Log_cd) ^ 2)))
house_mod = subset(house_tst, house_tst$OverallQual != "2" & house_tst$Neighborhood !="Blueste" & house_tst$Neighborhood !="Veenker" & house_tst$ExterQual !="Fa" )
(RMSE_test_BIC_log_cd = sqrt(mean((log(house_tst$SalePrice) - predict(BIC_Log_cd,house_mod)) ^ 2)))
n = length(resid(int_add_cd_mod))
AIC_Log_cd = step(int_add_cd_mod,trace=0)
(r2_aic=summary(AIC_Log_cd)$r.squared)
par(mfrow = c(1, 2))
plot(fitted(AIC_Log_cd), resid(AIC_Log_cd), col = "grey", pch = 20,ylim = c(-1, 1),
xlab = "Fitted", ylab = "Residuals", main = "Data from Model 2")
abline(h = 0, col = "dodgerblue", lwd = 2)
qqnorm(resid(AIC_Log_cd), main = "Normal Q-Q Plot", col = "darkgrey",ylim = c(-1, 1))
qqline(resid(AIC_Log_cd), col = "dodgerblue", lwd = 2)
bptest(AIC_Log_cd)
shapiro.test(resid(AIC_Log_cd))
(RMSE_Train_AIC_log_cd = sqrt(mean(resid(AIC_Log_cd) ^ 2)))
house_mod = subset(house_tst, house_tst$OverallQual != "2" & house_tst$Neighborhood !="Blueste" & house_tst$Neighborhood !="Veenker" & house_tst$ExterQual !="Fa" )
(RMSE_test_AIC_log_cd = sqrt(mean((log(house_tst$SalePrice) - predict(AIC_Log_cd,house_mod)) ^ 2)))
R2_val = c(r2_add, r2_add2, r2_int, r2_cd, r2_bic, r2_aic)
rmse_train = c(RMSE_Train_add, RMSE_Train_add2, RMSE_Train_log_int, RMSE_Train_log_cd, RMSE_Train_BIC_log_cd, RMSE_Train_AIC_log_cd)
rmse_test = c(RMSE_test_add, RMSE_test_add2, RMSE_test_log_int, RMSE_test_log_cd, RMSE_test_BIC_log_cd, RMSE_test_AIC_log_cd)
models = c("add_mod", "add_mod2", "log_int_mod", "int_add_cd_mod", "BIC_Log_cd", "AIC_Log_cd")
results = data.frame(models, R2_val, rmse_train, rmse_test)
colnames(results) = c("Models", "R2 Values", "Train RMSE", "Test RMSE")
knitr::kable(results)
test_mod = subset(test, test$OverallQual != "2" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
predict(AIC_Log_cd,test_mod)
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
predict(AIC_Log_cd,test_mod)
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
Result = exp(predict(AIC_Log_cd,test_mod))
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
Result = exp(predict(AIC_Log_cd,test_mod))
head(Result)
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
Result = exp(predict(AIC_Log_cd,test_mod))
head(Result)
head(train$SalePrice)
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
Result = exp(predict(AIC_Log_cd,test_mod))
Result
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
Result = exp(predict(AIC_Log_cd,test_mod))
str(Result)
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
Result = exp(predict(AIC_Log_cd,test_mod))
head(Result)
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
Result = exp(predict(AIC_Log_cd,test_mod,interval="confidance"))
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
Result = exp(predict(AIC_Log_cd,test_mod,interval="confidence"))
head(Result)
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test$SalePrice = exp(predict(AIC_Log_cd,test_mod,interval="confidence"))
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test$SalePrice = exp(predict(AIC_Log_cd,test_mod))
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
head(test)
GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
head(test_mod$GrLivArea)
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
head(test_mod)
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
head(test_mod[,c(GrLivArea)])
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
head(test_mod[,c(1,2)])
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
head(test_mod[,c(test_mod$Id,test_mod$GrLivArea)])
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
head(test_mod[,c(test_mod$Id)])
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
#head(test_mod[,c()])
colnames(test_mod)
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
head(test_mod[,c(63,18,20,21,13,55,28)])
colnames(test_mod)
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
head(test_mod[,c(63,18,20,21,13,55,28,81)])
colnames(test_mod)
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
head(test_mod[,c(63,18,20,21,13,55,28,81)])
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
knitr::kable(head(test_mod[,c(63,18,20,21,13,55,28,81)]))
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
knitr::kable(head(test_mod[,c(63,18,20,21,13,55,28,81)],10))
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa", test$Neighborhood ="Gilbert" )
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa"& test$Neighborhood ="Gilbert" )
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" & test$Neighborhood ="Gilbert" )
#GrLivArea,OverallQual, YearBuilt+ YearRemodAdd + Neighborhood TotRmsAbvGrd+ExterQual
test_mod = subset(test, test$OverallQual != "2" & test$OverallQual != "1" & test$Neighborhood !="Blueste" & test$Neighborhood !="Veenker" & test$ExterQual !="Fa" & test$Neighborhood =="Gilbert" )
test_mod$SalePrice = exp(predict(AIC_Log_cd,test_mod))
knitr::kable(head(test_mod[,c(63,18,20,21,13,55,28,81)],10))
# Real SalePrice for houses in Gilber Neighborhod from train
train_mod = subset(train$Neighborhood =="Gilbert" )
# Real SalePrice for houses in Gilber Neighborhod from train
train_mod = subset(train, train$Neighborhood =="Gilbert" )
knitr::kable(head(train_mod[,c(63,18,20,21,13,55,28,81)],10))
# Real SalePrice for houses in Gilber Neighborhod from train
train_mod = subset(train, train$Neighborhood =="Gilbert" )
knitr::kable(head(train_mod[,c(63,18,20,21,13,55,28,81)],10))
colnames(train_mod)
View(results)
(RMSE_Train_add = sqrt(mean(resid(add_mod) ^ 2)))
(RMSE_test_add = sqrt(mean((log(house_tst$SalePrice) - predict(add_mod,house_tst)) ^ 2)))
R2_val = c(r2_add, r2_add2, r2_int, r2_cd, r2_bic, r2_aic)
rmse_train = c(RMSE_Train_add, RMSE_Train_add2, RMSE_Train_log_int, RMSE_Train_log_cd, RMSE_Train_BIC_log_cd, RMSE_Train_AIC_log_cd)
rmse_test = c(RMSE_test_add, RMSE_test_add2, RMSE_test_log_int, RMSE_test_log_cd, RMSE_test_BIC_log_cd, RMSE_test_AIC_log_cd)
models = c("add_mod", "add_mod2", "log_int_mod", "int_add_cd_mod", "BIC_Log_cd", "AIC_Log_cd")
results = data.frame(models, R2_val, rmse_train, rmse_test)
colnames(results) = c("Models", "R2 Values", "Train RMSE", "Test RMSE")
knitr::kable(results)
install.packages("tinytex")
install.packages("tinytex")
#Libraries used
library(lmtest)
library(broom)
library(formattable)
library(faraway)
library(ggplot2)
library(leaps)
library(caret)
library(tinytex)
install.packages("TeXCheckR")
